<?xmlversion = "1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE >ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出；可以设置成OFF(关闭)或Error(只输出错误信息)-->
<!--monitorInterval：Log4j2能够自动检测修改配置文件和重新配置本身，设置间隔秒数-->
<Configuration  status ="WARN" monitorInterval="30">
    <Properties>
        <!-- 缺省配置（用于开发环境），配置日志文件输出目录和动态参数。其他环境需要在VM参数中指定；
           “sys:”表示：如果VM参数中没指定这个变量值，则使用本文件中定义的缺省全局变量值 -->
        <Property name="instance">spring-boot-log</Property>
        <Property name="log.dir">D:\Idea-WorkSpace\logs</Property>
    </Properties>

    <!-- 定义所有的appender -->
    <Appenders>

        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="[%date{yyyy-MM-ddHH:mm:ss.SSS}][%thread][%level][%class][%line]:%message%n"/>
        </Console>

        <!-- info及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingRandomAccessFile name="infoLog"
                                 fileName="${log.dir}/${instance}-info.log"
                                 filePattern="${log.dir}/%d{yyyy-MM}/${instance}-info-%d{yyyy-MM-dd}-%i.log.gz"
                                 append="true">
            <PatternLayout pattern="[%date{yyyy-MM-ddHH:mm:ss.SSS}][%thread][%level][%class][%line]:%message%n"/>

            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <Filters>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="NEUTRAL"/>
            </Filters>

            <Policies>
                <!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour -->
                <TimeBasedTriggeringPolicy interval="1"
                                           modulate="true"/>
                <!-- 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小 -->
                <SizeBasedTriggeringPolicy size="1MB"/>
                <!-- DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性) -->
            </Policies>

        </RollingRandomAccessFile>

        <!-- warn级别的日志信息 -->
        <RollingRandomAccessFile name="warnLog"
                                 fileName="${log.dir}/${instance}-warn.log"
                                 filePattern="${log.dir}/%d{yyyy-MM}/${instance}-warn-%d{yyyy-MM-dd}-%i.log.gz"
                                 append="true">

            <Filters>
                <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout pattern="[%date{yyyy-MM-ddHH:mm:ss.SSS}][%thread][%level][%class][%line]:%message%n"/>

            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="1MB"/>
            </Policies>
        </RollingRandomAccessFile>

        <!-- error级别的日志信息 -->
        <RollingRandomAccessFile name="errorLog"
                                 fileName="${log.dir}/${instance}-error.log"
                                 filePattern="${log.dir}/%d{yyyy-MM}/${instance}-error-%d{yyyy-MM-dd}-%i.log.gz"
                                 append="true">

            <Filters>
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout pattern="[%date{yyyy-MM-ddHH:mm:ss.SSS}][%thread][%level][%class][%line]:%message%n"/>

            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="1MB"/>
            </Policies>

        </RollingRandomAccessFile>
    </Appenders>


    <!-- 全局配置，默认所有的Logger都继承此配置 -->
    <!-- 用来配置LoggerConfig，包含一个root logger和若干个普通logger。
    additivity指定是否同时输出log到父类的appender，缺省为true。
    一个Logger可以绑定多个不同的Appender。只有定义了logger并引入的appender，appender才会生效。 -->
    <Loggers>

        <!-- 第三方的软件日志级别 -->
        <logger name="org.springframework" level="info" additivity="true">
            <AppenderRef ref="warnLog"/>
            <AppenderRef ref="errorLog"/>
        </logger>

        <logger name="java.sql.PreparedStatement" level="debug" additivity="true">
            <AppenderRef ref="Console"/>
        </logger>

        <!-- root logger 配置 -->
        <Root level="info" includeLocation="true">
            <AppenderRef ref="infoLog"/>
            <AppenderRef ref="Console"/>
            <AppenderRef ref="errorLog"/>
        </Root>

        <!-- AsyncRoot - 异步记录日志 - 需要LMAXDisruptor的支持 -->
        <!-- <AsyncRootlevel="info" additivity="false">
          <AppenderRef ref="Console"/>
          <AppenderRef ref="infoLog"/>
          <AppenderRef ref="errorLog"/>
        </AsyncRoot> -->
    </Loggers>
</Configuration>

<!--

1.1    log4j2配置属性详解
(1)根节点Configuration有两个属性:status和monitorinterval,有两个子节点:Appenders和Loggers(表明可以定义多个Appender和Logger).

    status用来指定log4j本身的打印日志的级别.

    monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.（如果更改配置文件，不用重启系统）

(2)Appenders节点，常见的有三种子节点:Console、RollingFile、File.

    Console节点用来定义输出到控制台的Appender.

        name:指定Appender的名字.

        target:SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.

        PatternLayout:输出格式，不设置默认为:%m%n.

    File节点用来定义输出到指定位置的文件的Appender.

        name:指定Appender的名字.

        fileName:指定输出日志的目的文件带全路径的文件名.

        PatternLayout:输出格式，不设置默认为:%m%n.

    RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender.

        name:指定Appender的名字.

        fileName:指定输出日志的目的文件带全路径的文件名.

        PatternLayout:输出格式，不设置默认为:%m%n.

        filePattern:指定新建日志文件的名称格式.

        Policies:指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.

        TimeBasedTriggeringPolicy:Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.

        SizeBasedTriggeringPolicy:Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.

        DefaultRolloverStrategy:用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。

(3)Loggers节点，常见的有两种:Root和Logger.

    Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出

        level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn <Error < Fatal < OFF.

        AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender.

    Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。

        level:日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn <Error < Fatal < OFF.

        name:用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.

        AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。

(4)关于日志level.

共有8个级别，按照从低到高为：All< Trace < Debug < Info < Warn < Error < Fatal < OFF.

        All:最低等级的，用于打开所有日志记录.

        Trace:是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.

        Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.

        Info:消息在粗粒度级别上突出强调应用程序的运行过程.

        Warn:输出警告及warn以下级别的日志.

        Error:输出错误信息日志.

        Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.

        OFF:最高等级的，用于关闭所有日志记录.

程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。

-->