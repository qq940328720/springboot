# 端口 请求匹配：<url-pattern>配置
server.port=8080
# server.servlet.path=*.html
spring.thymeleaf.cache=false
# 此时restart类加载器还会初始化，但不会监视文件更新。
#spring.devtools.restart.enabled=false
# 默认情况下，/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。
# 如果想改变默认的设置，可以自己设置不重启的目录：这样的话，就只有这两个目录下的文件修改不会导致restart操作了。
#spring.devtools.restart.exclude=static/**,public/**
# 如果要在保留默认设置的基础上还要添加其他的排除目录：spring.devtools.restart.additional-exclude
#spring.devtools.restart.additional-exclude=static/**,public/**
# 如果想要使得当非classpath下的文件发生变化时应用得以重启，使用：spring.devtools.restart.additional-paths，这样devtools就会将该目录列入了监听范围。
#spring.devtools.restart.additional-paths=static/**,public/**
# Mysql
spring.datasource.url=jdbc:mysql://172.20.62.254:3306/cold_face?useSSL=false
spring.datasource.username=root
spring.datasource.password=yanlijing
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 使用druid数据源  需要注意的是：spring.datasource.type旧的spring boot版本是不能识别的。
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# druid
#下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# Oracle请使用select 1 fromdual
spring.datasource.validationQuery=SELECT'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 ;日志是slf4j，log4j改为slf4j
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true
# mybatis
mybatis.type-aliases-package=cold.face.dal.model
mybatis.mapper-locations=classpath:mapper/*.xml
mapper.mappers=cold.face.dal.dao
mapper.not-empty=false
mapper.identity=MYSQL
# pagehelper
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.returnPageInfo=check
pagehelper.params=count=countSql
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
#spring.redis.host=127.0.0.1
spring.redis.host=172.20.62.254
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=yanlijing
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=10
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
## 连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
## 连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
## 连接超时时间（毫秒）
#spring.redis.timeout=0ms
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=10
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1ms
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=0ms
# RabbitMQ配置：
spring.application.name=springboot-rabbitmq
spring.rabbitmq.host=172.20.62.254
spring.rabbitmq.port=5672
spring.rabbitmq.username=root
spring.rabbitmq.password=yanlijing
spring.rabbitmq.virtual-host=/
# p端收到回调，确认消息发送结果
spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.publisher-returns=true
spring.rabbitmq.template.mandatory=true